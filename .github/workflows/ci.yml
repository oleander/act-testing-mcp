name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  pull_request_target:
    branches: [main]
    types: [opened, synchronize]

env:
  IMAGE_TAG: ghcr.io/${{ github.repository_owner }}/act-testing-mcp:latest
  ACT_VERSION: "0.2.82"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read MCP metadata
        id: mcp-metadata
        run: echo "metadata<<EOF" >> $GITHUB_OUTPUT && cat mcp-metadata.yaml >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT

      - uses: docker/build-push-action@v6
        id: build
        with:
          pull: true
          push: false
          tags: ${{ env.IMAGE_TAG }}
          build-args: |
            ACT_VERSION=${{ env.ACT_VERSION }}
            MCP_METADATA=${{ steps.mcp-metadata.outputs.metadata }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max

  docker-test:
    name: Test MCP Server Tools
    needs: docker-build
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read MCP metadata
        id: mcp-metadata
        run: echo "metadata<<EOF" >> $GITHUB_OUTPUT && cat mcp-metadata.yaml >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Docker image locally
        uses: docker/build-push-action@v6
        with:
          pull: true
          push: false
          load: true
          tags: ${{ env.IMAGE_TAG }}
          build-args: |
            ACT_VERSION=${{ env.ACT_VERSION }}
            MCP_METADATA=${{ steps.mcp-metadata.outputs.metadata }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max

      - name: Setup Go (for building from source if needed)
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.docker/cli-plugins
          key: ${{ runner.os }}-go
          restore-keys: |
            ${{ runner.os }}-go-

      - run: gh repo clone docker/mcp-gateway /tmp/mcp-gateway
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p "$HOME/.docker/cli-plugins/"
      - run: make docker-mcp
        working-directory: /tmp/mcp-gateway

      - name: Start gateway with act-testing-mcp server
        run: docker mcp gateway run --servers docker://${{ env.IMAGE_TAG }} --dry-run --verbose

  test:
    name: CI Tests and Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For pull_request_target, we need to checkout the PR head
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: pnpm format:check

      - name: Run tests
        run: pnpm test

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Create act baseline if missing
        run: |
          if [ ! -f ".act-baseline.json" ]; then
            echo "Creating baseline for CI environment..."
            pnpm compatibility:baseline
          fi

      - name: Check act compatibility
        run: pnpm compatibility:check
