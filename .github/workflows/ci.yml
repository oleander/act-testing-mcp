name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  IMAGE_TAG: ghcr.io/${{ github.repository_owner }}/act-testing-mcp:latest

jobs:
  test:
    name: CI Tests and Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For pull_request_target, we need to checkout the PR head
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: pnpm format:check

      - name: Run tests
        run: pnpm test

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Create act baseline if missing
        run: |
          if [ ! -f ".act-baseline.json" ]; then
            echo "Creating baseline for CI environment..."
            pnpm compatibility:baseline
          fi

      - name: Check act compatibility
        run: pnpm compatibility:check

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_TAG }}
          build-args: |
            ACT_VERSION=0.2.61
          cache-from: |
            type=gha
            type=registry,ref=${{ env.IMAGE_TAG }}
          cache-to: |
            type=gha,mode=max

  test_mcp:
    name: Test MCP Server Tools
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image locally for testing (load to Docker)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_TAG }}
          build-args: |
            ACT_VERSION=0.2.61
          cache-from: |
            type=gha
            type=registry,ref=${{ env.IMAGE_TAG }}

      - name: Install Docker MCP Gateway (extension)
        shell: bash
        run: |
          set -euxo pipefail
          if docker extension ls >/dev/null 2>&1; then
            docker extension install docker/mcp-gateway || true
          fi
        continue-on-error: true

      - name: Start MCP Gateway
        shell: bash
        run: |
          set -euxo pipefail
          docker mcp gateway run --servers docker://${{ env.IMAGE_TAG }} &
          sleep 10
        continue-on-error: true

      - name: MCP tools - list_workflows
        run: docker mcp tools call list_workflows || true
        shell: bash
        continue-on-error: true

      - name: MCP tools - act_doctor
        run: docker mcp tools call act_doctor || true
        shell: bash
        continue-on-error: true

      - name: MCP tools - validate_workflow
        run: |
          docker mcp tools call validate_workflow '{"workflow": ".github/workflows/ci.yml"}' || true
        shell: bash
        continue-on-error: true

      - name: MCP tools - validate_workflow_content
        run: |
          docker mcp tools call validate_workflow_content '{"yamlContent": "name: test"}' || true
        shell: bash
        continue-on-error: true

      - name: MCP tools - run_workflow (dry-run)
        run: |
          docker mcp tools call run_workflow '{"workflow": ".github/workflows/ci.yml", "event": "push", "dryRun": true}' || true
        shell: bash
        continue-on-error: true

      - name: Start container for healthcheck
        run: |
          docker rm -f act-testing-mcp-test >/dev/null 2>&1 || true
          docker run -d --name act-testing-mcp-test ${{ env.IMAGE_TAG }} || true
        shell: bash
        continue-on-error: true

      - name: Healthcheck container
        uses: gharlan/docker-healthcheck-action@v1
        with:
          container: act-testing-mcp-test
        continue-on-error: true
